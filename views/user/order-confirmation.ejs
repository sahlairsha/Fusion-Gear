<%- include('../../views/partials/user/header') %>


<style>
.order-container {
    max-width: 800px;
    margin: auto;
    padding: 10px;
    font-family: Arial, sans-serif;
    margin-bottom: 50px;
}

.search-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 40px;
    margin-top: 20px;
}

.search-bar {
    flex: 1;
    padding: 10px;
    margin-right: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.search-button {
    padding: 10px 20px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.order-card {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    background: #fff;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    transform: translateY(50px);
    transition: none; 
    cursor: pointer;
    margin-bottom: 20px;
}


.status-text{
    font-weight: 700;
    font-size: 14px;
    text-transform: uppercase;
}
.order-content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 10px;
    width: 100%;
    flex-wrap: wrap;
}

.product-info {
    display: flex;
    align-items: flex-start;
    gap: 10px;
    flex: 1;
}
.product-info img {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 5px;
    border: 1px solid #ddd;
    margin-top: 40px;
    margin-left: 20px;
}

.product-details {
    font-size: 14px;
    color: #555; 
    margin-top: 40px;   
    width: 400px;
    margin-left: 10px;
}
.order-status {
    text-align: right;
    flex: 1;
    font-size: 14px;
    color: #555;
    margin-right: 40px;  
    margin-top: 30px;
 
}

.order-status h4 {
    font-size: 18px;
    margin-top: 10px;
    margin-left: 30px;
    color: #333;
    
}

.order-status h6 {
    margin-top: 10px;
    font-size: 14px;
    color: #333;
}


.order-status .status-icon {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    margin-right: 5px;
    
    font-weight: 800;
}

.status-icon.dispatch{
    background-color: #FFC107;
  
}
.status-icon.pending{
    background-color: #007bff;
  
}
.status-icon.shipped{
    background-color : blue;
}

.status-icon.delivered {
    background-color: green;
}

.status-icon.canceled {
    background-color: red;
}

.status-icon.refund-completed {
    background-color: orange;
}

.order-actions {
    text-align: left;
    margin-top: 10px;
}

.rate-btn {
    background-color: #ffc107;
    color: black;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    font-size: 14px;
    cursor: pointer;
    text-align: center;
    margin-left: 10px;
    transition: background-color 0.3s ease;
    margin-top: 10px;
    display: inline-block; 
}
.go-to-shop-btn{
    background-color: #000;
    color: #fff;
    margin-top: 50px;
    margin-bottom: 20px;
    text-transform: uppercase;
    font-weight: 600;
}
.go-to-shop-btn:hover{
    border: 1px solid #000;
    background-color: #fff;
    color: #000;
}
.product-details,h6{

    font-size: 16px;
    font-weight: 600;

}

.product-details p {
    display: inline;
    margin-right: 10px; 
    font-size: 14px;
    color: #555;
}

.order-summary {
    text-align: left;
    margin-top: 10px;
    font-size: 14px;
    font-weight: 700;
    margin-left: 10px;
    margin-bottom: 10px;
}
.order-summary h6{
    margin-bottom: 5px;
    margin-top: 10px;
    margin-left: 10px;
}


/* Responsive Fix */
@media screen and (max-width: 768px) {
    .order-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }

    .product-info img {
        width: 70px;
        height: 70px;
    }

    .search-container {
        flex-direction: column;
        gap: 10px;
    }

    .search-button {
        width: 100%;
    }
}


    @keyframes fadeIn {
        0% { opacity: 0; }
        100% { opacity: 1; }


    }

    /* Slide-in animation */
@keyframes slideIn {
    0% {
        transform: translateX(-100%);
        opacity: 0;
    }
    100% {
        transform: translateX(0);
        opacity: 1;
    }
}

/* Fade-in animation */
@keyframes fadeIn {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}
  
@keyframes bottomToTop {
    0% {
        transform: translateY(50px); 
        opacity: 0; 
    }
    100% {
        transform: translateY(0);
        opacity: 1; 
    }
}


</style>

<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>Check Out</h4>
                    <div class="breadcrumb__links">
                        <a href="/">Home</a>
                        <a href="/products">Product</a>
                        <span>Orders</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



<div class="order-container">
    <h2>Your Orders</h2>

    <div class="search-container">
        <input type="text" class="search-bar" placeholder="Search your orders here">
        <button class="search-button">Search Orders</button>
    </div>

  <% orders.forEach(order => { %>
   
    <div class="order-card" data-order-id="<%=order._id%>">
        <% order.products.forEach(product => { %>
            <div class="order-content">
                <div class="product-info">
                  

                    </a>
                   <img  class="product-image" 
                    src="/uploads/public-image/<%= product.product_id.productImage[0] %>" 
                    alt="<%= product.product_id.productName %>">
                    <div class="product-details">
                        <h6><%= product.product_id.productName %></h6>
                        <% if (product.variantDetails) { %>
                            <p>Color: <%= product.variantDetails.color %></p>
                            <p>Size: <%= product.variantDetails.size %></p>
                            <p>Quantity: <%= product.quantity %></p>
                            <h6>Price: ₹<%= product.variantDetails.salePrice || product.variantDetails.regularPrice %></h6>
                        <% } else { %>
                            <p>No variant details available</p>
                        <% } %>
                    </div>
                    </div>

                    <div class="order-status">
                        <p>
                            <span class="status-icon <%= order.order_status.toLowerCase().replace(' ', '-') %>"></span>
                            <span class="status-text"><%= order.order_status %></span>
                        </p>
                        <p>Order Date: <%= new Date(order.createdAt).toLocaleDateString() %></p>
                        <% if (order.delivery_date) { %>
                            <p>Delivered On: <%= new Date(order.delivery_date).toLocaleDateString() %></p>
                        <% } %>
                        <h5 class="mt-2 ml-2">Total Price: ₹<%= order.total_price %></h5>

                        <% if (order.order_status === 'Delivered' && order.return_status === 'Pending') { %>
                            <a href="/order/return-form/<%= order._id  %>"><button class="btn btn-success return-btn mt-4">Return</button></a> 
                        <% } %>
                    </div>
                <% }); %>
                </div>

            <!-- Order summary -->
            <div class="order-summary">
                
                <% if (order.order_status === 'Delivered') { %>
                    <% order.products.forEach(product => { %>
                        <a href="/ratings/?id=<%= product.product_id._id %>" class="rate-btn mb-5">
                            Rate & Review <%= product.product_id.productName %>
                        </a>
                    <% }); %>
                <% } %>
            </div>
            
            <!-- Handle Payment Pending -->
            <% if (order.payment_status === 'Pending') { %>
                <div class="payment-pending">
                    <p>Your payment is still pending. Please retry the payment.</p>
                    <button class="btn btn-primary" onclick="retryPayment('<%= order.razorpay_order_id %>')">Retry Payment</button>
                </div>
            <% } else if (order.payment_status === 'Completed') { %>
                <div class="payment-completed">
                    <p class="text-success">Your payment has been completed successfully.</p>
                </div>
            <% } %>
            
        </div>
    
    <% }); %>

        
    <a href="/products" class="btn go-to-shop-btn">Continue Shopping</a>
</div>


</div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    // Open return form modal
    function openReturnForm(orderId) {
        const modal = document.getElementById('return-modal');
        modal.style.display = 'block';
        modal.setAttribute('data-order-id', orderId);
    }
    
    // Close return form modal
    document.querySelector('.close-btn').addEventListener('click', () => {
        document.getElementById('return-modal').style.display = 'none';
    });
    
    // Submit return request
    function submitReturnRequest() {
        const orderId = document.getElementById('return-modal').getAttribute('data-order-id');
        const reason = document.getElementById('return-reason').value;
    
        fetch('/order/return', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId, returnReason: reason }),
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            document.getElementById('return-modal').style.display = 'none';
            location.reload(); // Reload the page to show updated status
        })
        .catch(error => console.error('Error submitting return request:', error));
    }
    </script>

<script>
 document.addEventListener("DOMContentLoaded", function () {
    const loadingOverlay = document.getElementById("loading-overlay");
    const orderCards = document.querySelectorAll(".order-card");

            orderCards.forEach((card, index) => {
                card.style.opacity = "0";
                card.style.transform = "translateY(50px)";

                // Add animation with delay
                setTimeout(() => {
                    card.style.opacity = "1";
                    card.style.transform = "translateY(0)";
                    card.style.transition = "transform 0.8s cubic-bezier(0.25, 0.1, 0.25, 1), opacity 0.8s cubic-bezier(0.25, 0.1, 0.25, 1)";
                }, index * 200); 
            });
        }, 15000);




document.addEventListener("DOMContentLoaded", () => {
        const orderCards = document.querySelectorAll(".order-card");
        const images = document.querySelectorAll(".product-image");

        images.forEach(image => {
            image.addEventListener("click", (e) => {
                e.stopPropagation();
                const orderId = image.closest(".order-card").getAttribute("data-order-id");
                window.location.href = `/order-details/${orderId}`;
            });
        });
    });

</script>
<script>
function retryPayment(orderId) {
    console.log("Retrying payment for orderId:", orderId);
    if (!orderId) {
        console.error("Invalid order ID");
        return;
    }

    fetch('/retry-payment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ orderId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const options = {
                key: data.keyId,
                amount: data.amount * 100, // Convert to paise for Razorpay
                currency: 'INR',
                name: 'Fusion Gear',
                description: 'Order Payment',
                order_id: data.razorpay_order_id, // Razorpay order ID
                handler: function (response) {
                    console.log("Payment response received:", response);
                    fetch('/retry-payment-verify', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                        })
                    })
                    .then(res => res.json())
                    .then(result => {
                        if (result.success) {
                            Swal.fire({
                                title: 'Payment Successful!',
                                text: 'Your order has been paid successfully.',
                                icon: 'success',
                            }).then(() => {
                                window.location.reload(); // Reload to show updated order status
                            });
                        } else {
                            Swal.fire({
                                title: 'Payment Verification Failed!',
                                text: 'The payment could not be verified. Please try again later.',
                                icon: 'error',
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error verifying payment:', error);
                        Swal.fire({
                            title: 'Payment Verification Error!',
                            text: 'Error verifying payment, please try again later.',
                            icon: 'error',
                        });
                    });
                },
                prefill: {
                    name: 'User Name',
                    email: 'user@example.com',
                    contact: '1234567890',
                },
            };

            const rzp1 = new Razorpay(options);
            rzp1.open();
        } else {
            Swal.fire({
                title: 'Payment Failed',
                text: data.message || 'Failed to retry payment. Please try again later.',
                icon: 'error',
            });
        }
    })
    .catch(error => {
        console.error('Error retrying payment:', error);
        Swal.fire({
            title: 'Payment Failed',
            text: 'Failed to retry payment. Please try again later.',
            icon: 'error',
        });
    });
}

</script>





<%- include('../../views/partials/user/footer') %>
