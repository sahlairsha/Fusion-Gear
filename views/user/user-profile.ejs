<%-include('../../views/partials/user/header') %>
<link rel="stylesheet" href="/css/user/profile-alert.css">
<%-include('../../views/partials/user/user-side') %>

<div class="content-area">
    <form id="edit-form" data-google-signup="<%= user.googleId %>">
        <div id="alert-message" class="alert" style="display: none;"></div>
        <input type="hidden" name="_method" value="PUT">
        <button type="button" id="edit-btn" class="edit-btn" onclick="enableEdit()">Edit Profile</button>

        <!-- Full Name -->
        <div class="form-group">
            <label for="full_name">Full Name:</label>
            <input type="text" id="full_name" name="full_name" required placeholder="Enter your full name" value="<%= user.full_name %>" readonly>
            <div id="error1" class="error-message"></div>
        </div>

        <!-- Username -->
        <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" placeholder="Enter your username" value="<%= user.username %>" readonly>
            <div id="error2" class="error-message"></div>
        </div>

        <!-- Phone -->
        <div class="form-group">
            <label for="phone">Phone:</label>
            <input type="text" id="phone" name="phone" value="<%= user.phone %>" placeholder="Enter your phone number" readonly>
            <div id="error3" class="error-message"></div>
        </div>

        <!-- Submit Button -->
        <div class="form-group">
            <button type="button" id="update-btn" class="save-btn" style="display: none;" onclick="updateProfile(event)">Save Changes</button>
        </div>
    </form>

    <!-- Reset Password Section (Visible only for non-Google signups) -->
    <% if (!user.googleId) { %>
        <button type="button" id="create-btn" class="edit-btn" onclick="enablePasswordFields()">Reset Password?</button>

        <form action="/update-password" method="POST">

            <h6 class="password-heading mb-4 mt-5" id="create-password-head" style="display: none;">Create New Password</h6>

            <div class="form-group" id="newpassword-group" style="display: none;">
                <label for="password">New Password:</label>
                <div class="input-wrapper">
                    <input type="password" id="newpassword" name="password" readonly>
                    <button type="button" id="togglePassword" class="toggle-password">
                        <i id="eyeIcon1" class="fa fa-eye"></i>
                    </button>
                </div>
                <div id="error4" class="error-message"></div>
            </div>
            
            <div class="form-group" id="confirm_password-group" style="display: none;">
                <label for="cpassword">Confirm Password:</label>
                <div class="input-wrapper">
                    <input type="password" id="cpassword" name="confirm_password" readonly>
                    <button type="button" id="toggleCpassword" class="toggle-password">
                        <i id="eyeIcon2" class="fa fa-eye"></i>
                    </button>
                </div>
                <div id="error5" class="error-message"></div>
            </div>
            

            <div class="form-group" id="password-update-btn-group" style="display: none;">
                <button type="submit" class="update-btn" onclick="updatePassword(event)">Update</button>
            </div>

        </form>
    <% } %>
</div>
</div>
<script>
document.addEventListener("DOMContentLoaded", () => {
    const isGoogleSignup = !!document.getElementById('edit-form').getAttribute('data-google-signup');
    if (isGoogleSignup) {
        console.log("Google signup detected. Hiding password fields.");

        const newPasswordGroup = document.getElementById('newpassword-group');
        const confirmPasswordGroup = document.getElementById('confirm_password-group');

        if (newPasswordGroup) {
            newPasswordGroup.style.display = 'none';
        }

        if (confirmPasswordGroup) {
            confirmPasswordGroup.style.display = 'none';
        }
    }
});


// Enable Edit Mode
function enableEdit() {
    console.log("Enable edit triggered.");
    const formInputs = document.querySelectorAll("#edit-form input");
    const isGoogleSignup = !!document.getElementById('edit-form').getAttribute('data-google-signup');

    formInputs.forEach(input => {
        if (!(isGoogleSignup && (input.id === 'password' || input.id === 'cpassword'))) {
            input.removeAttribute("readonly");
        }
    });

    document.getElementById("newpassword-group").style.display = isGoogleSignup ? 'none' : 'block';
    document.getElementById("confirm_password-group").style.display = isGoogleSignup ? 'none' : 'block';

    document.getElementById("update-btn").style.display = "inline-block";
    document.getElementById("edit-btn").style.display = "none";
}

// Update Profile
function updateProfile(event) {
    console.log("Update button is triggered");
    const isGoogleSignup = !!document.getElementById('edit-form').getAttribute('data-google-signup');
    event.preventDefault(); // Prevent default form submission

    const nameVal = document.getElementById('full_name').value.trim();
    const err1 = document.getElementById('error1');

    const usernameVal = document.getElementById('username').value.trim();
    const err2 = document.getElementById('error2');

    const phone = document.getElementById('phone').value.trim();
    const err3 = document.getElementById('error3');

    // Validation Functions
    function nameValidation() {
        const namepattern = /^[a-zA-Z\s]{2,50}$/;
        if (nameVal === "") {
            err1.innerText = "Please enter the full name";
        } else if (!namepattern.test(nameVal)) {
            err1.innerText = "Name can only contain alphabets and spaces";
        } else {
            err1.innerText = "";
        }
    }

    function usernameValidation() {
        const usernamepattern = /^[a-zA-Z0-9_.]{3,15}$/;
        if (usernameVal === "") {
            err2.innerText = "Please enter the username";
        } else if (!usernamepattern.test(usernameVal)) {
            err2.innerText = "Only alphabets, numbers, and underscores. No spaces.";
        } else {
            err2.innerText = "";
        }
    }

    function phoneValidation() {
        const phonepattern = /^(\+\d{1,3}[- ]?)?\d{10}$/;
        const allZero = /^0+$/;
        if (phone === "") {
            err3.innerText = "Please enter your phone number";
        } else if (!phonepattern.test(phone)) {
            err3.innerText = "Enter a valid phone number!";
        } else if (allZero.test(phone.replace(/[-+ ]/g, ""))) {
            err3.innerText = "Phone number cannot be all zeros!";
        } else {
            err3.innerText = "";
        }
    }

    // Validate inputs
    nameValidation();
    usernameValidation();
    phoneValidation();

    // Check if there are any validation errors
    const hasError = [err1, err2, err3].some(err => err.innerText !== "");
    if (hasError) {
        return;
    }

    const formData = new FormData(document.getElementById("edit-form"));
    const data = {};
    formData.forEach((value, key) => {
        data[key] = value;
    });

    fetch('/update-profile', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (!response.ok) throw new Error("Network response was not ok");
        return response.json();
    })
    .then(data => {
        if (data.success) {
            showAlert("Profile updated successfully!", "success");
            setTimeout(() => location.reload(), 2000);
        } else {
            showAlert(data.message || "Error updating profile.", "error");
        }
    })
    .catch(error => {
        console.error("Fetch error:", error);
        showAlert("An error occurred while updating your profile.", "error");
    });
}

// Show Alert
function showAlert(message, type) {
    const alertBox = document.getElementById('alert-message');
    alertBox.innerText = message;
    alertBox.style.display = 'block';

    if (type === 'success') {
        alertBox.className = 'alert success';
        alertBox.style.backgroundColor = "#c7f9cc";
        alertBox.style.color = "green";
    } else {
        alertBox.className = 'alert error';
        alertBox.style.backgroundColor = "#f8d7da";
        alertBox.style.color = "red";
    }

    setTimeout(() => alertBox.style.display = 'none', 2000);
}

// Toggle password visibility
const togglePasswordButton = document.getElementById('togglePassword');
const toggleconfirmPasswordButton = document.getElementById('toggleCpassword');
const passwordInput = document.getElementById('newpassword');
const confirmPasswordInput = document.getElementById('cpassword');
const eyeIcon1 = document.getElementById('eyeIcon1');
const eyeIcon2 = document.getElementById('eyeIcon2');

togglePasswordButton.addEventListener('click', function () {
    // Toggle password visibility for both fields
    const type = passwordInput.type === 'password' ? 'text' : 'password';
    passwordInput.type = type


    // Toggle eye icon
    if (type === 'password') {
        eyeIcon1.classList.remove('fa-eye-slash');
        eyeIcon1.classList.add('fa-eye');
    } else {
        eyeIcon1.classList.remove('fa-eye');
        eyeIcon1.classList.add('fa-eye-slash');
    }
});

toggleconfirmPasswordButton.addEventListener('click', function () {
    const type =  confirmPasswordInput.type === 'password' ? 'text' : 'password';
    confirmPasswordInput.type = type

    if (type === 'password') {
        eyeIcon2.classList.remove('fa-eye-slash');
        eyeIcon2.classList.add('fa-eye');
    } else {
        eyeIcon2.classList.remove('fa-eye');
        eyeIcon2.classList.add('fa-eye-slash');
    }
});


// Enable Password Fields for Reset
function enablePasswordFields() {
    document.getElementById("newpassword-group").style.display = "block";
    document.getElementById("confirm_password-group").style.display = "block";
    document.getElementById("password-update-btn-group").style.display = "block";
    document.getElementById("create-password-head").style.display = "block";

    // Enable the password fields
    document.getElementById('newpassword').removeAttribute("readonly");
    document.getElementById('cpassword').removeAttribute("readonly");

    // Clear any existing errors
    document.getElementById('error4').innerText = "";
    document.getElementById('error5').innerText = "";
}




// Password Validation
function passwordValidation() {
    const password = document.getElementById('newpassword').value.trim();
    const err4 = document.getElementById('error4');
    const passwordPattern = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;

    if (password === "") {
        err4.innerText = "Please enter a valid password";
    } else if (!passwordPattern.test(password)) {
        err4.innerText = "Password must be at least 8 characters, including one letter, one number, and one special character.";
    } else {
        err4.innerText = "";
    }
}

// Confirm Password Validation
function confirmPasswordValidation() {
    const password = document.getElementById('newpassword').value.trim();
    const confirmPassword = document.getElementById('cpassword').value.trim();
    const err5 = document.getElementById('error5');

    if (confirmPassword === "") {
        err5.innerText = "Please confirm your password.";
    } else if (password !== confirmPassword) {
        err5.innerText = "Passwords do not match.";
    } else {
        err5.innerText = "";
    }
}

// Handle Password Update
function updatePassword(event) {
    event.preventDefault();

    // Show Alert
function showAlert(message, type) {
    const alertBox = document.getElementById('alert-message');
    alertBox.innerText = message;
    alertBox.style.display = 'block';

    if (type === 'success') {
        alertBox.className = 'alert success';
        alertBox.style.backgroundColor = "#c7f9cc";
        alertBox.style.color = "green";
    } else {
        alertBox.className = 'alert error';
        alertBox.style.backgroundColor = "#f8d7da";
        alertBox.style.color = "red";
    }

    setTimeout(() => alertBox.style.display = 'none', 2000);
}


    // Validate the password fields
    passwordValidation();
    confirmPasswordValidation();

    // Check if there are any validation errors
    const err4 = document.getElementById('error4');
    const err5 = document.getElementById('error5');
    const errors = [err4, err5].some((err) => err.innerText !== "");

    if (errors) {
        return;
    }

    // Submit the form via fetch
    const formData = new FormData(document.querySelector('form[action="/update-password"]'));
    const data = {};
    formData.forEach((value, key) => {
        data[key] = value;
    });

    fetch('/update-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (!response.ok)
         throw new Error("Network response was not ok");
        return response.json();
    })
    .then(data => {
        if (data.success) {
            showAlert("Password updated successfully!", "success");
            setTimeout(() => location.reload(), 1000);
        } else {
            showAlert(data.message || "Error updating password.", "error");
        }
    })
    .catch(error => {
        console.error("Fetch error:", error);
        showAlert("An error occurred while updating your password.", "error");
    });
}

</script>

<%-include('../../views/partials/user/footer') %>
