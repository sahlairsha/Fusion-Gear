<%- include('../../views/partials/user/header') %>



<style>

  /* Alert Box Styles */
    .alert {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 30px;
        background-color: #f44336;
        color: white;
        font-size: 16px;
        border-radius: 5px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 9999;
        animation: fadeInOut 5s ease-in-out;
    }

    .alert.success {
        background-color: #4CAF50;
    }

    .alert.error {
        background-color: #f44336;
    }

    /* Animation for fade in and fade out */
    @keyframes fadeInOut {
        0% { opacity: 0; }
        10% { opacity: 1; }
        90% { opacity: 1; }
        100% { opacity: 0; }
    }
.updated-step {
    animation: flash 1.5s ease-in-out;
}

@keyframes flash {
    0% { background-color: #e0ffe0; }
    100% { background-color: transparent; }
}
.details-container {
    width: 90%;
    max-width: 1200px;
    margin: 20px auto;
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

/* Delivery Address Section */
.order-details {
    border: 1px solid #ddd;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px; /* Space below delivery address */
    background-color: #fff;
}

/* Product Details Section */
.product-details {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    background-color: #fff;
  
}

.product-card {
    display: flex;
    align-items: center;
    padding: 20px;
    width: 100%;
    flex-wrap: wrap;
}

.product-img {
    width: 120px;
    height: auto;
    margin-right: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.product-info {
    flex: 1; /* Allows the product-info to take up the remaining space */
    padding: 10px;
    box-sizing: border-box;
}

.product-info h4 {
    margin-bottom: 10px;
    color: #333;
    font-size: 16px;
    font-weight: 600;
}

.product-info p {
    font-size: 14px;
    color: #555;
    margin-right: 20px;
    display: inline-block;
}

.product-info h3 {
    margin-top: 10px;
    color: #2874f0;
    font-size: 16px;
}
.order-status {
    text-align: center;
}

.timeline {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: 10px;
    padding: 10px;
    position: relative;
}

.timeline-step {
    text-align: center;
    opacity: 0.5;
    position: relative;
    font-weight: normal; /* Default font weight */
    color: #888; /* Default color */
}

.timeline-step img {
    width: 40px; /* Adjust icon size */
    height: 40px;
}

/* Completed status */
.timeline-step.completed {
    opacity: 1;
    font-weight: bold;  /* Bold font weight */
    color: #28a745; /* Green color for completed */
}

/* Active status */
.timeline-step.active {
    opacity: 1;
    font-weight: bold;  /* Bold font weight */
    color: #007bff; /* Blue color for active */
}

/* Dashed line between completed steps */
.timeline-step.completed + .timeline-step.completed::before {
    content: '';
    position: absolute;
    left: -20px;
    top: 50%;
    width: calc(100% + 40px); /* Adjust width to match the space between steps */
    height: 2px;
    background: #ccc;
    border-top: 2px dashed #ccc;
    transform: translateY(-50%); /* Center the dashed line */
}

/* Status without full timeline */
.status-alone {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.status-alone img {
    width: 50px;
    height: 50px;
}

/* Hover Effect for Images */
.timeline-step img:hover {
    transform: translateY(-10px); /* Moves image 10px upward */
    transition: transform 0.3s ease-in-out;
}

.status-alone img:hover {
    transform: translateY(-5px); /* Slight upward movement for single status image */
    transition: transform 0.3s ease-in-out;
}

.shipping-address{
    font-weight: 800;
    margin-bottom: 30px;
}

.delivery-address{
    margin-bottom: 20px;
}
.delivery-address p{
    margin: 0;
}
.cancel{
    color: #fff;
}

.invoice-btn{
    border : 1px solid #000;
}


</style>

<div id="customAlertOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1000; display: flex; justify-content: center; align-items: center;">
    <div style="background: white; padding: 20px; border-radius: 8px; text-align: center;">
        <p id="customAlertMessage" style="margin: 0; font-size: 16px; font-weight: bold;"></p>
        <button id="customAlertClose" style="margin-top: 20px; padding: 10px 20px; border: none; background-color: #f44336; color: white; border-radius: 5px; cursor: pointer;">Close</button>
    </div>
</div>

<div class="details-container">
    <div class="order-details">

        <div class="delivery-address">
            <h3>Order Details</h3>
  <br>
            <h5 class="shipping-address">Shipping Address</h4>
            <p><strong>Recipient Name:</strong> <%=  shippingAddress.recipient_name %></p>
            <p><strong>Street Address:</strong> <%=  shippingAddress.streetAddress %>, <%=shippingAddress.city%>,<%= shippingAddress.state%>,<%= shippingAddress.pincode%></p>
            </p>
            <p>Phone:<%=shippingAddress.phone  %></p>
          
            
        </div>
     
        <a href="/generate-invoice/<%=orders._id%>"><button class="btn invoice-btn">Download Invoice</button></a>
        <div class="order-status mt-4">
            <h4>Order Status</h4>
        
            <% 
                const originalStatuses = ['Pending', 'Dispatch', 'Shipped', 'Delivered'];
                const isCanceled = orders.order_status === 'Canceled';
                const isReturned = orders.order_status === 'Return';
            %>
        
            <% if (isCanceled || isReturned) { %>
                <!-- Display only the Canceled or Return status -->
                <div class="status-alone">
                    <img src="/images/<%= isCanceled ? 'canceled.png' : 'return.png' %>" alt="<%= orders.order_status %>">
                    <p><%= orders.order_status %></p>
                </div>
            <% } else { %>
                <!-- Full timeline for normal statuses -->
                <div class="timeline">
                    <% originalStatuses.forEach((status, index) => { 
                        let stepClass = '';
                        
                        if (orders.order_status === status) {
                            stepClass = 'active';
                        } else if (originalStatuses.indexOf(orders.order_status) > index) {
                            stepClass = 'completed';
                        } else {
                            stepClass = 'inactive';
                        }
                    %>
                        <div class="timeline-step <%= stepClass %>">
                            <img src="/images/<%= status.toLowerCase() %>.png" alt="<%= status %>">
                            <p><%= status %></p>
                        </div>
                    <% }); %>
                </div>
            <% } %>
        </div>
        
        
    <div class="product-details">
        <% orders.products.forEach(item => { %>

        <div class="product-card">
         
            <img src="/uploads/public-image/<%= item.product_id.productImage[0] %>" 
            alt="<%= item.product_id.productName %>" class="product-img">
           
            <div class="product-info">
                <h4><%= item.product_id.productName %></h4>
                <% if (item.variantDetails) { %>
                    <p>Color: <%= item.variantDetails.color %></p>
                    <p>Size: <%= item.variantDetails.size %></p>
                    <p>Quantity: <%= item.quantity %></p>
                    <h6>Price: ₹<%= item.variantDetails.salePrice || item.variantDetails.regularPrice %></h6>
                <% } else { %>
                    <p>No variant details available</p>
                <% } %>
            </div>

            <% }) %>
            <h5>Total: ₹<%= orders.total_price %></h3>

                 
                 <% if (orders.order_status === 'Dispatch') { %>
                    <button type="submit" class="btn btn-danger ml-4"><a  class="cancel" href="/orders/cancel/confirm?id=<%= orders._id  %>">Cancel Order</a></button>
            <% }else if(orders.order_status === 'Delivered') {%>
                <a  class="return" href="/order/return-form?id=<%= orders._id  %>"><button type="submit" class="btn btn-primary ml-4">Return Order</button></a>
                <% } %>
               </div>
            </div>
        </div>
    </div>

</div>


</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.8.1/socket.io.js" integrity="sha512-8BHxHDLsOHx+flIrQ0DrZcea7MkHqRU5GbTHmbdzMRnAaoCIkZ97PqZcXJkKZckMMhqfoeaJE+DNUVuyoQsO3Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script>
   
          const socket = io({
            auth: { userId: "<%= user._id %>" }
        });

        socket.on("connect", () => {
            console.log("Connected to the server");
        });

        // Handle connection error
        socket.on("connect_error", (err) => {
            console.error("Connection error:", err.message);
            showAlert("Connection to the server lost. Please check your network.", "error");
        });

        // Listen for order update events
        socket.on("order_update", (data) => {
            console.log("Order update received:", data);
            showAlert(data.message, "success");
            updateTimeline(data.status);
        
        });

        // Function to display custom styled alert
        function showAlert(message, type) {
            const alertBox = document.createElement('div');
            alertBox.classList.add('alert', type);
            alertBox.innerHTML = message;
            document.body.appendChild(alertBox);
            
           
            setTimeout(() => {
                alertBox.remove();
            }, 10000);

        }

        function updateTimeline(currentStatus) {
    const statuses = ['Pending', 'Dispatch', 'Shipped', 'Delivered', 'Canceled', 'Return'];
    const timeline = document.getElementById("timeline");

    if (timeline) {
        timeline.innerHTML = statuses
            .map((status, index) => {
                let stepClass = '';
                let displayText = status; // Default text

                // Handle "Canceled" status
                if (currentStatus === 'Canceled') {
                    stepClass = status === 'Canceled' ? 'completed canceled' : 'inactive';
                    if (status === 'Return') displayText = 'Not Applicable';
                } 
                // Handle "Return" status
                else if (currentStatus === 'Return') {
                    stepClass = status === 'Return' ? 'active return' : 'inactive';
                    if (status === 'Canceled') displayText = 'Not Applicable';
                }
                // If the current status is at this step
                else if (currentStatus === status) {
                    stepClass = 'active';
                }
                // If the order has passed this step
                else if (statuses.indexOf(currentStatus) > index) {
                    stepClass = 'completed';
                } 
                // Future steps remain inactive
                else {
                    stepClass = 'inactive';
                }

                // Return the status step element with the appropriate class and display text
                return `
                    <div class="timeline-step ${stepClass}">
                        <img src="/images/${status.toLowerCase()}.png" alt="${status}">
                        <p>${displayText}</p>
                    </div>`;
            })
            .join('');
    }
}


</script>

<script>
document.addEventListener("DOMContentLoaded", () => {
    // Function to clear URL parameters
    function clearURLParams() {
        // Replace the current URL with one without query parameters
        history.replaceState(null, document.title, window.location.pathname);
    }

    // Detect URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const action = urlParams.get('action');
    const message = urlParams.get('message');
    
    // Only show the alert if the action is 'cancel' or 'return' and message exists
    if ((action === 'cancel' || action === 'return') && message && message.trim() !== '') {
        const alertOverlay = document.getElementById('customAlertOverlay');
        const alertMessage = document.getElementById('customAlertMessage');
        const alertCloseButton = document.getElementById('customAlertClose');
        
        alertMessage.textContent = message;
        alertOverlay.style.display = 'flex';
        
        // Close the alert when the button is clicked
        alertCloseButton.addEventListener('click', () => {
            alertOverlay.style.display = 'none';
            clearURLParams();
        });
    } else {
        // Ensure the alert is hidden if no cancel or return action
        const alertOverlay = document.getElementById('customAlertOverlay');
        alertOverlay.style.display = 'none';
    }
});


</script>



<%- include('../../views/partials/user/footer') %>