<%- include('../../views/partials/user/header') %>

<style>
    /* Container for the entire review section */
    .product-review-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    /* Product Details Section */
    .product-details {
        background-color: #fff;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        display: flex;
        flex-direction: row;
        gap: 20px;
    }

    .product-image {
        flex: 1;
        max-width: 300px;
        height: auto;
    }

    .product-info {
        flex: 2;
    }

    .product-info h2 {
        margin-bottom: 10px;
    }

    .product-info p {
        font-size: 1rem;
        color: #555;
    }

    /* Review Container */
    .review-container {
        display: flex;
        gap: 20px;
        flex-direction: row;
        align-items: flex-start;
    }

    /* Review Form */
    .review-form {
        flex: 2;
        background-color: #fff;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        max-width: 600px;
        width: 100%;
    }

    .form-group {
        margin: 15px 0;
    }

    .form-group label {
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

    .form-group textarea,
    .form-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 3px;
        font-size: 1rem;
    }

    .form-group textarea {
        height: 100px;
    }

    .submit-btn {
        background-color: #2874f0;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 3px;
        font-size: 1rem;
        cursor: pointer;
    }

    .submit-btn:hover {
        background-color: #1b5dcc;
    }

    /* Star Rating */
    .stars {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .star {
        width: 30px;
        height: 30px;
        background-color: #d3d3d3;
        cursor: pointer;
        display: inline-block;
        clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
        transition: background-color 0.2s ease;
    }

    .star.filled {
        background-color: gold;
    }

    .star.highlight {
        background-color: #ffcc00;
    }

    /* Review Sidebar */
    .review-sidebar {
        flex: 1;
        background-color: #fff;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
</style>

<div class="product-review-container">
    <!-- Product Details Section -->
    <div class="product-details">
        <img src="/uploads/public-image/<%=product.productImage[0] %>" alt="<%= product.productName %>" class="product-image">
        <div class="product-info">
            <h2><%= product.productName %></h2>
            <p><%= product.description %></p>
            <p><strong>Price: Rs<%= product.salePrice %></strong></p>
        </div>
    </div>

    <!-- Review and Rating Section -->
    <div class="review-container">
        <!-- Review Sidebar (optional for other reviews, product info, etc.) -->
        <div class="review-sidebar">
            <h3>Other Reviews</h3>
           <p><%=product.reviews.description%></p>
           <p>Average Rate: <strong><%=product.ratings.average%>/5</strong> </p>
           <p>Total Reviews : <strong><%= product.ratings.count  %></strong>  Review</p>
        </div>

        <!-- Review Form -->
        <div class="review-form">
            <h3>Review this product</h3>
            <div id="userRating" class="stars">
                <span class="star" onclick="submitRating(1)" onmouseover="highlightStars(1)" onmouseout="resetStars()"></span>
                <span class="star" onclick="submitRating(2)" onmouseover="highlightStars(2)" onmouseout="resetStars()"></span>
                <span class="star" onclick="submitRating(3)" onmouseover="highlightStars(3)" onmouseout="resetStars()"></span>
                <span class="star" onclick="submitRating(4)" onmouseover="highlightStars(4)" onmouseout="resetStars()"></span>
                <span class="star" onclick="submitRating(5)" onmouseover="highlightStars(5)" onmouseout="resetStars()"></span>
            </div>
            <span id="averageRating">Average Rating: 0 / 5</span>
            <span id="totalRatings">(0 Reviews)</span>

            <form id="ratingForm" action="/reviews" method="POST">
                <input type="hidden" name="productId" value="<%= product._id %>">
                <input type="hidden" name="userId" value="<%= user._id %>">
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" placeholder="Write your review here..."></textarea>
                    <div id="error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="title">Title (optional)</label>
                    <input type="text" id="title" name="title" placeholder="Review title...">
                </div>

                <button type="submit" class="submit-btn">Submit</button>
            </form>
        </div>
    </div>
</div>



<script>
// Star Rating Logic
function highlightStars(starCount) {
    const stars = document.querySelectorAll('#userRating .star');
    stars.forEach((star, index) => {
        if (index < starCount) {
            star.classList.add('highlight');
        } else {
            star.classList.remove('highlight');
        }
    });
}

// Reset stars after hover ends
function resetStars() {
    const stars = document.querySelectorAll('#userRating .star');
    stars.forEach(star => star.classList.remove('highlight'));
}

// Fill the stars based on the rating
function fillStars(rating) {
    const stars = document.querySelectorAll('#userRating .star');
    stars.forEach((star, index) => {
        if (index < rating) {
            star.classList.add('filled'); // Add filled class to make it gold
        } else {
            star.classList.remove('filled'); // Remove filled class to reset it
        }
    });
}



async function submitRating(stars) {
    try {
        const productId = '<%= product._id %>'; 
        const userId = '<%= user._id %>';  

        const response = await fetch(`http://localhost:3001/ratings`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                productId: productId,  
                userId: userId, 
                rating: stars,
               
            })
        });

        const result = await response.json();

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Rating Submitted!',
                text: result.message,
                confirmButtonText: 'OK'
            });

            // Update the UI with the new average rating and total ratings
            document.getElementById('averageRating').innerText = `Average Rating: ${result.updatedRating} / 5`;
            document.getElementById('totalRatings').innerText = `(${result.totalRatings} Reviews)`;

            // Fill the stars based on the new rating
            fillStars(result.updatedRating);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: result.message,
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error submitting rating:', error);
        Swal.fire({
            icon: 'error',
            title: 'An Error Occurred',
            text: 'There was an issue submitting your rating.',
            confirmButtonText: 'OK'
        });
    }
}



    document.getElementById('ratingForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const error = document.getElementById('error')
        
        const productId = '<%= product._id %>';  
        const userId = '<%= user._id %>';        
        
        const description = document.getElementById('description').value.trim();
        const title = document.getElementById('title').value.trim();

        if (!description || description.length < 5) {
            error.innerText = 'Description must be at least 20 characters long.';
            return;
        }
        
        const data = { productId, userId, description, title };

        const response = await fetch('/reviews', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
        });

        const result = await response.json();
        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Review Submitted!',
                text: result.message,
                confirmButtonText: 'OK'
            });
            setTimeout(()=> {
                location.reload()
            },3000)
        } else {
            Swal.fire({
            icon: 'error',
            title: 'An Error Occurred',
            text: 'There was an issue submitting your review.',
            confirmButtonText: 'OK'
        });
        }
    });





// Fetch ratings function
async function fetchRatings() {
    try {
        const productId = '<%= product._id %>';


        const response = await fetch(`http://localhost:3001/ratings/${productId}`);
        const data = await response.json();

        if (response.ok) {
            const averageRating = data.averageRating;
            const totalRatings = data.totalRatings;

            if (totalRatings === 0) {
                document.getElementById('averageRating').innerText = 'No ratings yet.';
                document.getElementById('totalRatings').innerText = '(No reviews)';
            } else {
                document.getElementById('averageRating').innerText = `Average Rating: ${averageRating} / 5`;
                document.getElementById('totalRatings').innerText = `(${totalRatings} Reviews)`;
            }

            fillStars(averageRating); 
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Could not fetch ratings. Please try again later.',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error fetching ratings:', error);
       
        Swal.fire({
            icon: 'error',
            title: 'An Error Occurred',
            text: 'There was an issue fetching the ratings.',
            confirmButtonText: 'OK'
        });
    }
}

document.addEventListener('DOMContentLoaded', fetchRatings);


</script>


<%- include('../../views/partials/user/footer') %>