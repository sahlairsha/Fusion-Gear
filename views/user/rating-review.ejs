<%- include('../../views/partials/user/header') %>
<link rel="stylesheet" href="/css/user/review.css">
<div class="product-review-container">
    <!-- Product Details Section -->
    <div class="product-details">
        <img src="/uploads/public-image/<%=product.productImage[0] %>" alt="<%= product.productName %>" class="product-image">
        <div class="product-info">
            <h2><%= product.productName %></h2>
            <p><%= product.description %></p>
        </div>
    </div>

    <!-- Review and Rating Section -->
    <div class="review-container">
        <!-- Review Form -->
        <div  class="review-form" id="rating" data-user-rating = <%= userRating  %>>
            <h3>Review this product</h3>
            <div id="userRating" class="stars">
                <span class="star" onclick="submitRating(1)" onmouseover="highlightStars(1)" onmouseout="resetStars()"></span>
                <span class="star" onclick="submitRating(2)" onmouseover="highlightStars(2)" onmouseout="resetStars()"></span>
                <span class="star" onclick="submitRating(3)" onmouseover="highlightStars(3)" onmouseout="resetStars()"></span>
                <span class="star" onclick="submitRating(4)" onmouseover="highlightStars(4)" onmouseout="resetStars()"></span>
                <span class="star" onclick="submitRating(5)" onmouseover="highlightStars(5)" onmouseout="resetStars()"></span>
                <div id="rating-status" class="rating-status"></div>
            </div>
         
   <div id="rating-text" class="ratings-text" ></div>
            <form id="ratingForm" action="/reviews" method="POST">
                <input type="hidden" name="productId" value="<%= product._id %>">
                <input type="hidden" name="userId" value="<%= user._id %>">
                <div class="form-group">
                    <label for="description">Description</label>
                    <textarea id="description" name="description" placeholder="Write your review here..."></textarea>
                    <div id="error" class="error-message"></div>
                </div>

                <div class="form-group">
                    <label for="title">Title (optional)</label>
                    <input type="text" id="title" name="title" placeholder="Review title...">
                </div>

                <button type="submit" class="submit-btn">Submit</button>
            </form>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const userRating = '<%= userRating %>' || 0; 
    fillStars(userRating);
});

function highlightStars(starCount) {
const stars = document.querySelectorAll('#userRating .star');
const ratingStatus = document.getElementById('rating-status');
const messages = ["Very Bad", "Bad", "Good", "Very Good", "Excellent"];
const colors = ["#780000", "#c1121f", "#ffb703", "#03045e", "#386641"];

stars.forEach((star, index) => {
    if (index < starCount) {
        star.classList.add('highlight');
    } else {
        star.classList.remove('highlight');
    }
});

if (starCount > 0) {
    ratingStatus.innerText = messages[starCount - 1];
    ratingStatus.style.color = colors[starCount - 1];
} else {
    ratingStatus.innerText = '';
    ratingStatus.style.color = '';
}
}

function resetStars() {
const stars = document.querySelectorAll('#userRating .star');
stars.forEach(star => star.classList.remove('highlight'));
const ratingStatus = document.getElementById('rating-status');
ratingStatus.innerText = '';
ratingStatus.style.color = '';
}

function fillStars(rating) {
const stars = document.querySelectorAll('#userRating .star');
const ratingStatus = document.getElementById('rating-status');
const messages = ["Very Bad", "Bad", "Good", "Very Good", "Excellent"];
const colors = ["red", "orangered", "orange", "green", "darkgreen"];

stars.forEach((star, index) => {
    if (index < Math.round(rating)) {
        star.classList.add('filled');
    } else {
        star.classList.remove('filled');
    }
});

if (rating > 0) {
    ratingStatus.innerText = messages[Math.round(rating) - 1];
    ratingStatus.style.color = colors[Math.round(rating) - 1];
} else {
    ratingStatus.innerText = '';
    ratingStatus.style.color = '';
}
}



async function submitRating(stars) {
    try {
        const productId = '<%= product._id %>';
        const userId = '<%= user._id %>';

        fillStars(stars);

        const response = await fetch('/ratings/submit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, userId, rating: stars })
        });

        const result = await response.json();

        if (response.ok) {
            document.getElementById('rating-text').innerText =  "Your rating has been saved successfully"
            Swal.fire({
                icon: 'success',
                title: 'Rating Submitted!',
                text: result.message,
                confirmButtonText: 'OK',
            });
        } else {
             document.getElementById('rating-text').innerText =  ""
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: result.message,
                confirmButtonText: 'OK',
            });
        }
    } catch (error) {
        console.error('Error submitting rating:', error);
        Swal.fire({
            icon: 'error',
            title: 'An Error Occurred',
            text: 'There was an issue submitting your rating.',
            confirmButtonText: 'OK',
        });
    }
}

document.getElementById('ratingForm').addEventListener('submit', async function (e) {
e.preventDefault(); // Prevent default form submission

const error = document.getElementById('error');
const description = document.getElementById('description').value.trim();
const title = document.getElementById('title').value.trim();
const productId = '<%= product._id %>';
const userId = '<%= user._id %>';

// Check if the review description is empty
if (description === '') {
    error.innerText = 'Please enter a review description.';
    return;
} else {
    error.innerText = ''; // Clear error if valid input
}

// Show loading SweetAlert
Swal.fire({
    title: 'Submitting your review...',
    text: 'Please wait while we save your review.',
    allowOutsideClick: false,
    didOpen: () => {
        Swal.showLoading();
    }
});

try {
    // Submit review data to the server
    const response = await fetch('/reviews', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId, userId, description, title })
    });

    const result = await response.json();

    if (response.ok) {
        Swal.fire({
            icon: 'success',
            title: 'Review Submitted!',
            text: 'Thank you for your feedback.',
            confirmButtonText: 'OK'
        });

        // Optionally, reset the form fields
        document.getElementById('ratingForm').reset();
    } else {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: result.message || 'There was an error submitting your review.',
            confirmButtonText: 'OK'
        });
    }
} catch (error) {
    console.error('Error submitting review:', error);

    Swal.fire({
        icon: 'error',
        title: 'Server Error!',
        text: 'Something went wrong while submitting your review. Please try again later.',
        confirmButtonText: 'OK'
    });
}
});

</script>


<%- include('../../views/partials/user/footer') %>